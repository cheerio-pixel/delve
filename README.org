#+TITLE: delve.el

=Delve= (currently version =0.9=) is a package on top of [[https://github.com/org-roam/org-roam][Org Roam]]. It
provides tools to collect, inspect and edit Org Roam Nodes in a
separate application buffer. It helps you to quickly establish and
maintain a project-specific subset of Org Roam Nodes, e.g. when
writing a paper or for collecting information on a particular topic.
Those subsets (called 'collections') can be stored persistently in
separate files. =Delve= also offers functions to 'edit' nodes, e.g. by
adding or removing tags without having to open the node's file itself.

The present version is a complete rewrite in response to =Org Roam=
fundamentally changing its internal structure when migrating from =v1=
to =v2=. It has grown much more than its author has expected. Please
file an issue if there are functionalities you miss or if you find an
error. Also feel free to discuss conceptual issues. 

Upcoming changes: Presently, development is mostly aiming at covering
the present set of features with automated tests. New features will
only be added if the author needs them for his own work, or if it
turns out that the intended use cases are too complicated or not
useful.

[[./screenshots/delve-intro-tour.gif]]

* Feature List

 - =Dashboard= with customizable queries to have quick access (and
   overview) of nodes with a certain tags, and to see all nodes with
   no links.
 - Insert or delete nodes interactively from the =Delve= buffer, or from
   any Org Roam file using =delve-minor-mode=.
 - Re-arrange nodes manually by moving them around, or by creating
   hierarchical trees.
 - Preview a node in =Delve=, thus offering a first rough glance at the
   content of a node without leaving the collection buffer.
 - Edit the node's tags from within the =Delve= buffer without leaving it.
 - Insert backlinks or fromlinks of a specific node.
 - Hide away nodes by creating "piles".
 - Move marked nodes into a new collection.

* Installation

=Delve= requires =lister=, which is available on Melpa. =Delve= itself,
however, is not (yet?) on Melpa. For the time being, you will have to
install it manually.

=Delve= is currently following the =org-roam= source without taking care
of the releases. If there is a DB error or something similar, consider
updating =org-roam= from source even if there is not a new official
release yet.

=Delve= profits from =all-the-icons=. If it is installed, items will be
displayed with nice icons. Install it from [[https://github.com/domtronn/all-the-icons.el][there]].

Here's an example using =straight.el=:

#+begin_src emacs-lisp
  (use-package delve
    :straight (:repo "publicimageltd/delve"
               :host github
               :type git)
    :bind
    ;; the main entry point, offering a list of all stored collections
    ;; and of all open Delve buffers:
    (("<f12>" . delve))
    :config
    ;; set meaningful tag names for the dashboard query
    (setq delve-dashboard-tags '("Tag1" "Tag2"))
   ;; turn on delve-minor-mode when org roam file is opened:
    (delve-global-minor-mode))
#+end_src

* The notion of a 'collection'

The core idea of Delve is to allow you to add stuff to "collections",
and to edit those. A collection is a list of nodes, either stored in a
file or currently visited in a =Delve= buffer. All commands which ask
you to do something "with a collection", e.g. to add a node to a
collection, first ask you to select the collection to act on. In these
cases, you can always choose both an open =Delve= buffer or a
storage file. Selecting a storage file effectively causes the file to
be read in a new buffer, reading it 'on the fly'.

*Example*: Imagine you have a stored collection of nodes referring to
the topic /Artificial Intelligence/. Then when visiting an Org Roam
file, you find an interesting node which you would like to add to that
collection. You press =M-n c= (=delve-minor-mode-collect=) and select the
file which contains that collection. Now a new =Delve= buffer has been
created in the background and the node at point been added to it. To
explicitly visit that buffer, use =C-u f12= (=C-u M-x delve=).

* Storing collections in files

You can save or load any =Delve= buffer by using =M-x delve-open-buffer=
(or =C-x f= from within a =Delve= buffer) or =M-x delve-save-buffer= (or =C-x
s=, respectively). To save the buffer to a new file, use =M-x
delve-write-buffer= (or =C-x w=).

Once a buffer is associated with a file, the file name will be
displayed in the header. There will be an asterisk before the file
name if the content has been modified and is thus not guaranteed to
match the stored content anymore.

There is a default storage directory defined in the variable
=delve-store-directory=. It defaults to the directory =delve-store= within
the local emacs user directory.

Currently, storage is only possible within this directory. It is
planned to make storage more flexible.

* How items are presented

All nodes which refer to a file (and not to a subheading) look like that:

[[./screenshots/file-node-no-tags.png]]

Here the node has been created as a backlink from the node "KÃ¼nstliche
Intelligenz (AI)". If you press RET on the button linking to that
original node, =Delve= will look for it and jump to it if it exists.

The other type of nodes (i.e., headings) looks like that:

[[./screenshots/heading-node-tags.png]]

Also note the list of tags which are associated with that specific node.

Per default, heading notes are displayed with their outline path,
including the file title. The variable =delve-display-path= controls
this behaviour, set it to =nil= to turn this off. Here's two nodes first
with path and then without:

[[./screenshots/node-with-and-without-path.png]]

In the dashboard buffer, you'll find queries:

[[./screenshots/query.png]]

Press =<TAB>= to add its contents into the current buffer's collection.

* Keybindings / Usage

** Delve

*** Navigation / The Tab Key

Use the usual nagivation commands.

=<TAB>= does the following:
 - If there is a sublist (indented nodes) below the node at point,
   hide them outline-style.
 - If the current node hides a sublist, open it.
 - If there is no sublist, and the current item is a Zettel, insert
   all backlinks and fromlinks as sublist.
 - If there is no sublist, and the current item is a query, execute
   the query and insert the results as a sublist.
 - If there is no sublist, and the current item is a a pile, insert
   the contents of the pile and remove the pile (!).

*** Preview of visit the node at point

[[./screenshots/node-with-preview.png]]

| Command / Keys | Function                                     |
|----------------+----------------------------------------------|
| o, C-return    | Visit the node at point  (its original file) |
| RET            | If on a node, toggle preview                  |

The preview buffer recognizes all id links in the previewed text and
turns them into 'buttons'. Press RET or click on these buttonized
links to visit the node they are referring to. Press =i= on the links in
the preview to directly insert the node referred to after the node at
point.

*** Marking / unmarking nodes

| Command / Keys | Function                                                     |
|----------------+--------------------------------------------------------------|
| m              | Mark node at point and move to next one                      |
| C-u m          | Mark all nodes below current nodes, if they form a "sublist" |
| u              | Unmark node at point and move to next one                    |
| C-u u          | Unmark sublist bewlow                                        |
| U              | Unmark all items                                             |

Most functions which work with "marked nodes" also accept regions. 

*** Choosing and inserting nodes 

Per default, offer to insert a node from a given list of nodes per
completion. If =counsel= is installed, all of the following commands
allow to insert multiple nodes at once. Support for other completion
packages is lacking, contributions are welcome.

| Command / Keys | Function                                                  |
|----------------+-----------------------------------------------------------|
| nn             | Insert new node(s)                                        |
| nt             | Insert node(s), limit selection to a specific tag or tags |
| nb             | Insert node(s) from all backlinks of that node below      |
| nf             | insert node(s) from all fromlinks of that node below      |

*** Insert nodes directly

| Command / Keys | Function                                                                |
|----------------+-------------------------------------------------------------------------|
| tab            | If current node is not hiding a sublist, insert backlinks and fromlinks |
| f, C-right     | Insert fromlinks of current node as a sublist                           |
| b, C-left      | Insert backlinks to current node as a sublist                           |

*** Deleting nodes

| Command / Keys | Function                             |
|----------------+--------------------------------------|
| <delete>       | Delete marked nodes or node at point |

*** Refresh / Update

| Command / Keys | Function                                           |
|----------------+----------------------------------------------------|
| g              | Update all nodes marked as "out of sync" (with a star) |
| C-u g          | Force update of marked nodes or node at point |

*** Piling Zettel

Like on any good real desktop, you can pile the Zettels:

| Command / Keys | Function                                        |
|----------------+-------------------------------------------------|
| m, u           | Mark or unmark first the nodes you want to pils |
| p              | Then create a pile                              |
| i              | Insert contents of pile and remove the pile     |

If you press =p= while the region is active, pile the nodes in that
region.

To insert a pile, either press =<TAB>= or =i=.

*** Insert headings
Use =h= to insert a heading. A heading is just a simple text item which
you can use to internally structure your nodes.
*** Remote Editing of Org Roam Nodes 

| Command / Keys | Function               |
|----------------+------------------------|
| +              | Add tag(s) remotely    |
| -              | Remove tag(s) remotely |

Remote editing either applies to all marked nodes and the nodes in the
currently active region, or, if nothing is marked, to the node at
point.

If editing multiple nodes, you can choose between all tags which are
present in all nodes (union of sets). Attempts to remove a tag in a node
which does not have this tag is silently skipped.

Press =g= to refresh after editing.

** Delve Minor Mode

If you enable the =delve-global-minor-mode=, a =delve-minor-mode= will be
locally enabled when visting an Org Roam file. This binds some keys
which facilitate 'collecting' stuff. All keys are on a prefix map
which defaults to =M-n=. You can change the bindings by just setting
the prefix map:

#+begin_src emacs-lisp
  ;; set this /before/ loading Delve!, e.g. in the :init section of a
  ;; use-package declaration:
    (setq delve-minor-mode-prefix-key (kbd "C-c d"))
#+end_src

| Command / Keys | Function                                                     |
|----------------+--------------------------------------------------------------|
| M-n .          | Create ID link for the current heading                       |
| M-n +          | Add tag to the heading at point                              |
| M-n -          | Remove tag from the heading at point                         |
| M-n c          | Add node at point to a Delve collection                      |
| M-n a          | Add all nodes of current Org Roam file to a Delve collection |
| M-n f          | Find the node at point in currently open Delve buffers       |

It is planned to enable the collection keys also in =Org Roam Mode=
buffers (TODO).

* Customizations

: delve-dashboard-tags 

List of strings (or of lists of strings), from which the initial
Dashboard queries are built. E.g., with the setting =(setq
delve-dashboard-tags '("relevant"))=; the Dashboard will have a query
for all Delve nodes tagged with the tag =relevant=.

* Upcoming 

This is a list of stuff I intend to add (soonish):

 - Save all stores with suffix '.delve'.
 - Do not restrict storage to one directory; use list of directories instead.
 - +Remote editing on all marked lists.+
 - Make minor mode collection functions also work in org roam mode buffer.
 - +Add 'modified' flag and show it in the header.+
 - Add sorting according to title and mtime.

* Changelog

** Current 

 - For non-file nodes, display the outline path.
 - Depend on Org Roam with DB 18 (merged in Nov., 10th, 21).
 - Introduce new item type "Heading" (key =h=)
 - Allow remote editing (add, remove tags) of multiple items.
 - Mark list as "modified" if items are deleted, inserted or updated.
   Storing the list removes that flag.

** 0.9 
Complete rewrite; now based on Org Roam =v2=.
