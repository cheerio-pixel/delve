#+TITLE: delve.el

Delve is a tool to delve into your [[https://github.com/org-roam/org-roam][org roam zettelkasten]]. Its main
purpose is to find pages by following links (either backlinks or
references made in the page itself). Thus you can quickly overview the
network of interpage relations you have created. For this purpose, you
can also use the predefined searches which attempt to highlight some
focal points of this network (e.g., those pages which have the most
links, or the last modified pages).

Opening Delve the first time, you can browse your zettelkasten by
ROAM_TAG, or use one of the predefined searches. Further functionality
will be added.

Delve inherits and extends the functionality from the now deprecated
[[https://github.com/publicimageltd/org-roam-dashboard][org-roam-dashboard]].

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings
:END:

:CONTENTS:
- [[#obligatory-screenshot-and-some-explanation][Obligatory screenshot and some explanation]]
- [[#features][Features]]
- [[#important-interactive-functions][Important interactive functions]]
  - [[#main-entry-point-delve-open-or-select][Main entry point: delve-open-or-select]]
  - [[#basic-navigation][Basic navigation]]
  - [[#remote-editing][Remote editing]]
    - [[#typical-workflow-changing-tags][Typical workflow: Changing tags]]
  - [[#open-a-sublist-in-a-new-delve-buffer][Open a sublist in a new delve buffer]]
  - [[#further-useful-commands][Further useful commands]]
- [[#installation][Installation]]
  - [[#basic-installation][Basic Installation]]
  - [[#further-configuration][Further Configuration]]
    - [[#predefined-searches][Predefined Searches]]
    - [[#pretty-icons][Pretty Icons]]
    - [[#evil][Evil]]
- [[#keybindings][Keybindings]]
  - [[#delve][Delve]]
  - [[#delve-minor-mode][Delve minor mode]]
- [[#changelog][Changelog]]
- [[#bugs--problems--untested-stuff][Bugs / Problems / Untested Stuff]]
:END:

* Obligatory screenshot and some explanation
[[./screenshots/screenshot_last_modified.png]]

On this screenshot, you can see that the user has opened the list of
the last ten modified pages. On the lower part of the buffer, you can
see several tags like "Alias" (I have tagged aliased pages for
debugging purposes), "Begriff" (German for 'concept'), "Dashboard"
(pages of importance for the current project), "Gedanke" (free
standing thought), etc. If I want to see the pages with these tags, I
can move the cursor to that line and press =<TAB>= to expand it. Delve
will present the same type of list as above.

There's quite some information stuffed into each line. Let's take as
an example the first page of the list of the last 10 modified pages:

[[./screenshots/detail.png]]

That page has the title *Imagination*. It has been modified on November,
4th. The icon right beside the date shows that this page is actually
the result of a search for pages. It is tagged as a concept
('Begriff'). Since it is on the top of this result list, it is the
last modified page of the whole database.

As you can see, there are 17 links pointing /from/ that page to some
other page, and 19 other pages which point /to/ that page (backlinks) on
the topic of imagination. The type of links is visualized by using
arrows: 19 pages point to the title, the title points to 17 other
pages.

If you would want to follow these links, you could move te cursor on the
page item and press the right or the left cursor key, respectively. A
sublist would be inserted showing all the links.

Here's an example of such an expanded list:

[[./screenshots/detail2.png]]

The top item is a page with "Criticism of AI" ("Kritik der KI"). There
are two links pointing to that page, incidentally two article
reference pages. These page items have a an arrow pointing to the
right on their very left side, that marks them as "links pointing to
the top file". The last item is a page for the concept "Artificial
Intelligence" ("KÃ¼nstliche Intelligenz"). As the item on its left side
indicates, that's a link found in the top page ("Criticism of AI")
itself. 

The most important feature is that the user can now look at each of
these linked pages again, and investigate /their/ links. So we could
now, for example, look at what pages link to "Artificial Intelligence"
or what references are made within this page, without leaving Delve.

* Features

Note that this is still a work in progress. See [[#bugs--problems--untested-stuff]] below.

 - Display lists of org roam pages (=Zettel) with additional
   information on backlinks, "tolinks", and modification date.
 - Expand the Zettel item (page) to see backlinks, or links pointing
   to the zettel, or both.
 - Interactively browse the Zettelkasten according to predefined
   searches (Last ten modified pages; top linked pages; etc.)
 - Visit the Zettel at point to edit it. Delve provides an interactive
   command to switch back and forth between the Delve buffers and the
   org roam buffers.
 - Remote editing: Add or remove tags without leaving the tree view.
 - Additional minor mode (delve-minor-mode) for org roam pages,
   allowing to open a new Delve buffer with the current org roam page
   as top item.

* Important interactive functions
** Main entry point: delve-open-or-select

Bind =delve-open-or-select= to any key. If you call that function, a list of
predefined searches (which you can customize, of course) is presented,
along with a list of tag searches for each ROAM_TAG in your database.
Move to an item and press <TAB>. A list of pages matching the search
will be inserted below the item.

Press =q= to bury the delve buffer.

If you then press =delve-open-or-select= again, you will be presented with a
list of open delve buffers. 

** Basic navigation

 + Use navigation keys to move between the items. Mark items using
   'm' (see also keybindings below).
 + Use =<tab>= to either display the results of expanding the item at
   point, or to remove the results again. In other words, =<tab>= is a
   toggle.
 + Use =<return>= to visit the zettel at point. If you are not a zettel
   page item, nothing will happen.
 + Use =+= and =-= to remote edit the ROAM_TAGS of the page at point. You
   can also mark items and then remote edit all marked pages in one
   rush.
 + Use =q= to bury the buffer.
 + Use =C-l= to create a sublist in a new buffer, depending on what item
   you are on (see below for more explanation).

** Remote editing

One main concept of =delve= is to allow remote editing of zettel pages.
Thus it is possible to add or remove tags (ROAM_TAGS) without leaving
the delve buffer. By pressing =+= or =-=, you can add or remove tags from
the item at point. If there are any marked items, these commands apply
to them instead.

Pages which have been edited remotely are not immediately
re-integrated into the org roam database. Thus, all items which have
been modified are internally marked as being in need of redisplay.
There is also a visual cue indicating that the item needs to be
redisplayed:

[[./screenshots/tainted-item.png]]

All items will be updated by pressing =.= Note that this just updates
the information from the database. If the database itself has not been
updated, the display will be wrong. Usually, it just takes a few
seconds to wait until =org roam= has updated the latest changes (it is
shown in the echo area).

In order to force the redisplay of an item, press =.= on the item, or
mark several items to redisplay them all.

*** Typical workflow: Changing tags

Imagine you had a lot of pages tagged with the tag '/Readme/'. Now you
recognize that you should have rather used the tag '/Unread/'. To change
all pages tagged '/Readme/' to '/Unread/', you can:

 1. Open the tag search for '/Readme/'.
 2. Move down on the first item and press =C-u m=.
 3. Press =+= to add the new tag '/Unread/'.
 4. Press =-= to remove the old tag '/Readme/'.
 5. Press =.= to update the display of the items.

** Open a sublist in a new delve buffer

If you are on a searchable item (e.g. a predefined search or a tag),
press =C-l= to create a new delve buffer which expands on just this
item.

If point is on a zettel page, create a new delve buffer with all the
list items belonging to this list on which the cursor is positioned
on. This effectively moves the current sublist you are in into a new
buffer, cutting off everything else. 

If point is on a zettel page and you press =C-u C-l=, that is, if you
call =C-l= with a prefix arg, then the current zettel will be expanded
in a new buffer. This also works with searches.

** Further useful commands

 + =M-x delve-kill-all-buffers= will kill all delve buffers. Useful if
   you have accumulated quite some sublists.

* Installation
** Basic Installation

Delve depends on another tool of mine called [[https://github.com/publicimageltd/lister][lister]]. But neither
package is available at MELPA yet. So you have to download both packes
(=delve= and =lister=) in order to make this work. In the following
example, [[https://github.com/quelpa/quelpa][quelpa]] is used for downloading the package. Alternatively,
you can download it with another package manager or manually.

  #+begin_src emacs-lisp
(use-package lister
  :quelpa (lister :fetcher git
  		  :url "https://github.com/publicimageltd/lister"))

(use-package delve
  :quelpa (delve :fetcher git 
		 :url "https://github.com/publicimageltd/delve")
  :config
  (use-package delve-minor-mode
    :config
    (add-hook 'org-mode-hook #'delve-minor-mode-maybe-activate))
  :bind
  (("<f12>" . delve-open-or-select)))

  #+end_src

This snippet above also installs the =delve-minor-mode=. It is a local
minor mode which is only activated if the org mode file visited
belongs to the org roam database (e.g., is placed with in the org roam
directory). See [[#delve-minor-mode]] below.

** Further Configuration
*** Predefined Searches
Delve comes with a set of predefined searches. See the documentation
of the variable =delve-searches= for more details. Basically, you pass a
list of keywords which define the search. 

A search is made by specialization. Delve provides a universal search
query which would return /all/ pages, with some additional information
such as the number of backlinks and to links. Thus to define a search,
you basically add further constraints which defines the subset you are
interested in. See the documentation of =delve-db-query-all-zettel= for
the details.

Here's a list of available fields available in the unconstraint query:

| Field name   | Meaning                                       |
|--------------+-----------------------------------------------|
| titles:file  | Filename of the page                          |
| titles:title | Title of the page                             |
| tags:tags    | List of tags                                  |
| files:meta   | Additional information such as mtime or atime |
| tolinks      | Count of all links going from that page       |
| backlinks    | Count of all links pointing to that page      |
|--------------+-----------------------------------------------|

=tags:tags= and =files:meta= are lists and have to parsed. Thus, they
cannot be used in an SQL constraint. To use these values to produce a
subset, you must do it with elisp by adding a =:postprocess= function.
Searches using =:postprocess= will be relatively slow, since all pages
have to be passed to this function.

Here's an overview of keywords defining a search:

| Keyword      | Meaning                                                              |
|--------------+----------------------------------------------------------------------|
| :name        | The display name for the seach item                                  |
| :constraint  | SQL query (a vector) constraining the generic search                 |
| :postprocess | Pass result objects to this function                                 |
| :args        | Values which will be picked up in the constraint (e.g. by using $r1) |
|--------------+----------------------------------------------------------------------|

A =:constraint= clause is an SQL statement (a vector), as it is used by
the library =emacsql=, which is used by =org-roam= under the hood. An
example value would be e.g. =[:where tags:tags :is null]=. This would
return all pages with no tags associated.

If you want to test the results of a search query, you could use
something like this:

#+begin_src emacs-lisp
  (delve-operate-search 
   (delve-make-page-search :constraint [:order-by (desc backlinks) :limit 3]))
#+end_src

*** Pretty Icons
For pretty icons, install [[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]. If you also want pretty
icons when calling =delve-open-or-select=, use the following option:

  #+begin_src emacs-lisp
(setq delve-use-icons-in-completions t) ;; per default nil
#+end_src

*** Evil 

=evil-mode= users should add the following snippet to their
configuration to use the default keybinding:

#+begin_src emacs-lisp
(evil-set-initial-state 'delve-mode 'emacs)
#+end_src

There is [[https://github.com/publicimageltd/delve/issues/3][an issue thread]] where you can post, comment and discuss
possible ways to integrate =delve= into =evil=. Eventually, it will be
merged into the source code, but since I don't use =evil=, I won't be
hurrying it. (Remember, that's a hobby horse!)

* Keybindings

** Delve 

On standard emacs, use the usual navigation keys. Additionally, the
following keys apply:

| Key   | Function                                                                                       |
|-------+------------------------------------------------------------------------------------------------|
| ENTER | Visit zettel at point                                                                          |
| TAB   | Expand on zettel or search at point, or hide it                                                |
| LEFT  | Insert list with all backlinks pointing to zettel at point                                     |
| RIGHT | Insert list with all links in the zettel at point                                              |
| m     | Mark the item at point, or unmark it.                                                          |
| C-u m | Mark or unmark the whole sublist to which the item at point belongs.                           |
| u     | Remove all marks in the buffer.                                                                |
| *     | Mark the whole buffer.                                                                         |
| +     | Add tag to the zettel at point, or to all marked items.                                        |
| -     | Remove tag from the zettel at point, or from all marked items.                                 |
| g     | Update (redisplay) all items in the buffer (might take some time).                             |
| .     | Update (redisplay) the item at point, all marked items and all items which are not up-to-date. |
| C-l   | Open a new delve buffer using (or expanding) the zettel at point.                              |
| r     | Revert buffer to the original list, updating it.                                               |
|-------+------------------------------------------------------------------------------------------------|

For integrating =delve= into =evil=, see the [[#evil][section above]].

** Delve minor mode

This is a local minor mode which adds some convenience key bindings to
the org roam page buffer.

Per default, this submap is mapped to the prefix =C-c d=. This yields:


| Key | Function                                                                 |
|-----+--------------------------------------------------------------------------|
| C-c d d | Open a new delve buffer with the current page as top item, and expand it |
| C-c d + | Add a tag.                                                               |
| C-c d - | Remove a tag.                                                            |
|-----+--------------------------------------------------------------------------|


Using =C-c d d= in an org-roam buffer is particularly useful: It
presents all links from the current page as a delve list. See, for
example, the following example of a page with two backlinks (and no
links from the page itself):

[[./screenshots/example-backlinks-org-roam-page.png]]

Pressing =C-c d d= creates a tree representation of that buffer:

[[./screenshots/example-backlinks.png]]

The first two items in this list are the backlinks (in the right part
of the org roam buffer ). The other, links with an right arrow
pointing to the left, are those links which point /from/ the current
page to another page (i.e., a link to the page titled "KreativitÃ¤t"
("Creativity"). Each of these linked pages is displayed with /their/
respective links, so that the user could now expand on them to dive
deeper into the Zettelkasten.

* Changelog
:PROPERTIES:
:TOC:      :depth 0
:END:

** Current pre-release version

*** Enhancements

 + Adding and removing tags now also applies to marked list items, not
   only to the item at point.
 + All sublists are now displayed in its own new delve buffer.
 + Actions displayed when calling =delve-open-or-select= are now
   customizable. See the documentation string of =delve-action= for
   more details.
 + List titles do not use icons anymore (for easier completion).
 + Predefined searches are now defined on the fly and thus can be
   changed easier.
 
*** Fixes
 + Include ID links.

** 0.3 Initial release.

* Bugs / Problems / Untested Stuff

 - *Aliases* are not recognized. Sometimes this leads to undesireable
   results, because you just see the Zettel with the same title listed
   twice or even more often. An algorithm to effectively identify
   duplicates is on the way.
 - There is a general problem with *duplicate items*, not related to
   aliases. I could not find out its source yet.
 

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:
